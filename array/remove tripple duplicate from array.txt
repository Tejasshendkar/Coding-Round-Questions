class Solution {
    public int removeDuplicates(int[] nums) {
        int i = 1; 
        int count = 1; 
        for(int j = 1; j < nums.length; j++){
            if(nums[j] == nums[j - 1]){
                count++;
            } 
            else{
                count=1; 
            }
            if (count <= 2) {
                nums[i] = nums[j];
                i++;
            }
        }
        return i;
    }
}
________________________

one more solution

import java.util.HashMap;
import java.util.Map.Entry;
class Solution {
    public int removeDuplicates(int[] nums) {     
    LinkedHashMap<Integer,Integer> set=new LinkedHashMap<>();
      for(int i=0;i<nums.length;i++){
           if(set.containsKey(nums[i])){
            set.put(nums[i],set.get(nums[i])+1);
           }else{
            set.put(nums[i],1);
           }
        }
        System.out.println(set);
        int t=0;    
        for(Entry<Integer, Integer> entry: set.entrySet()){
           int fr=1;
            while(fr<=2 && fr<=entry.getValue()){
                //System.out.println("--->"+entry.getKey());
                nums[t++]=entry.getKey();
                fr++;
            }
        }

         
         return t;
    }
}









-------------------------------------
output


[1,1,1,2,2,3]
Stdout
{1=3, 2=2, 3=1}
Output
[1,1,2,2,3]
Expected
[1,1,2,2,3]


Example 1:

Input: nums = [1,1,1,2,2,3]
Output: 5, nums = [1,1,2,2,3,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
Example 2:

Input: nums = [0,0,1,1,1,1,2,3,3]
Output: 7, nums = [0,0,1,1,2,3,3,_,_]